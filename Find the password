/*
    Time Complexity: O(NlogN)
    Space Complexity: O(1)

    Where N is the size of array/list DIGITS.
*/


vector<int> findPassword(vector<int> &digits, int n)
{
    // Sort the digits
    sort(digits.begin(), digits.end());

    vector<int> password;

    int carry = 0;

    int digit1, digit2, digitSum;

    for (int i = n - 1; i >= 0; i -= 2)
    {
        digit1 = digits[i];

        if (i - 1 >= 0)
        {
            digit2 = digits[i-1];
        }
        else
        {
            digit2 = 0;
        }

        // Updating sum by adding existing carry
        digitSum = digit1 + digit2 + carry;

        // Calculating carry for next the next digitSum
        carry = digitSum / 10;
        digitSum = digitSum % 10;

        password.push_back(digitSum);
    }

    // Adding remaining carry
    if (carry)
    {
        password.push_back(1);
    }

    // Removing leading zeroes if any
    while (password.size() > 1 && password.back() == 0)
    {
        password.pop_back();
    }

    reverse(password.begin(), password.end());

    return password;
}
